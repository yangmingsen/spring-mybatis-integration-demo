<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- Mapper 扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描 cn.wmyskxz.mapper 包下的组件 -->
        <property name="basePackage" value="top.yms.mapper"/>
    </bean>

    <bean id="demo3" class="top.yms.ui.demo.Demo3"> </bean>
    <bean id="demo4" class="top.yms.ui.demo.Demo4"> </bean>


    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath*:properties/*.properties" />
    <!-- 数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close">
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="maxActive" value="10" />
        <property name="minIdle" value="5" />
    </bean>

    <!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml" />
    </bean>


    <!-- spring与Mybaits的整体结合原理：
       主要是两个关键类 SqlSessionFactoryBean 和 MapperFactoryBean.
          1. 因为 SqlSessionFactoryBean 实现 Spring的InitializingBean接口的 afterPropertiesSet 方法,那么会在Spring的
       AbstractAutowireCapableBeanFactory.invokeInitMethods被调用(也就是初始化beans时initializeBean方法).

          2.afterPropertiesSet方法会完成MyBatis初始化(如解析xml配置文件等), 然后返回一个org.apache.ibatis.session.SqlSessionFactory.
       然后这个SqlSessionFactoryBean是一个FactoryBean,所以后续会在SqlSessionTemplate初始化时被注入进去.

          3.然后再说这个MapperFactoryBean,首先他也是一个FactoryBean. 然后 他是怎么实践通过@Autowire注入,然后就可以进行调用了呢？
          比如
          @Autowire
          private UserMapper userMapper

          //do search. 这个怎么实现的呢?
          userMapper.findUser(1L)..

          再说一遍，因为userMapper是一个FactoryBean,所以当执行@Autowire时, 会调用 MapperFactoryBean.getObject()方法,
          而getObject() => return getSqlSession().getMapper(this.mapperInterface).

          这个getSqlSession是一个 SqlSessionTemplate. 这个 SqlSessionTemplate 就一个 Mybatis中的 SqlSession 的包装.

          所以 getSqlSession().getMapper(this.mapperInterface) 会调用org.apache.ibatis.session.SqlSession.getMapper()方法.

          这个方法在mybatis中是以代理实现的,也就是说它会返回一个接口的代理实现类(比如为 UserMapperProxyImpl ), 那么当业务代码调用时,比如userMaper.findUser(1L),
          那么这个userMaper代理实现类(UserMapperProxyImpl)便会invoke代理方法,代理方法会根据方法名去MyBatis中的Configuration找对应的Mapper,然后执行SQL操作

       -->
    <bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <!--sqlSessionFactory属性指定要用到的SqlSessionFactory实例-->
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
        <!--mapperInterface属性指定映射器接口，用于实现此接口并生成映射器对象-->
        <property name="mapperInterface" value="top.yms.mapper.UserMapper" />

    </bean>



</beans>